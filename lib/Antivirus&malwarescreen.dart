import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:fl_chart/fl_chart.dart';
import 'package:device_apps/device_apps.dart';
import 'package:permission_handler/permission_handler.dart';

class AntivirusAndMalwareScreen extends StatefulWidget {
  @override
  _AntivirusAndMalwareScreenState createState() =>
      _AntivirusAndMalwareScreenState();
}

class _AntivirusAndMalwareScreenState extends State<AntivirusAndMalwareScreen> {
  bool isScanning = false;
  List<String> scannedApps = [];
  List<String> suspectedThreats = [];
  Map<String, int> dailyThreatData = {};

  final List<String> weekDays = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];

  @override
  void initState() {
    super.initState();
    _requestPermissions();
  }

  void _requestPermissions() async {
    Map<Permission, PermissionStatus> statuses = await [
      Permission.storage,
    ].request();

    final info = statuses[Permission.storage]!.isGranted;
    print(info);

    if (info) {
      _startScan();
    } else {
      // Handle permission denied
      showDialog(
        context: context,
        builder: (context) => AlertDialog(
          title: Text("Permission Required"),
          content: Text("This app needs permission to access installed apps."),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: Text("OK"),
            ),
          ],
        ),
      );
    }
  }

  void _startScan() async {
    setState(() {
      isScanning = true;
      scannedApps.clear();
      suspectedThreats.clear();
    });

    // Get all installed apps, including system apps, and apps with launch intents
    List<Application> apps = await DeviceApps.getInstalledApplications(
      includeAppIcons: true,        // Include app icons in the scan
      includeSystemApps: true,      // Include system apps
      onlyAppsWithLaunchIntent: true, // Only apps that can be launched
    );

    for (var app in apps) {
      await Future.delayed(Duration(milliseconds: 500)); // Simulate scanning delay
      scannedApps.add(app.appName); // Add app name to scanned apps list
      setState(() {}); // Refresh UI with each app scanned
      bool isThreat = await _checkWithMalwareAPI(app); // Check if app is a threat
      if (isThreat) {
        suspectedThreats.add(app.appName); // Add to suspected threats if it's a threat
      }
    }

    setState(() {
      isScanning = false; // Scanning finished
    });

    String today = _getDayString(DateTime.now().weekday); // Get today's weekday as a string
    dailyThreatData.update(today, (value) => suspectedThreats.length, ifAbsent: () => suspectedThreats.length);

    for (String day in weekDays) {
      dailyThreatData.putIfAbsent(day, () => 0); // Ensure data for each day
    }

    _showScanResultDialog(); // Show the dialog box after scanning is complete
  }

  Future<bool> _checkWithMalwareAPI(Application app) async {
    // Define a list of known malicious app package names (for demonstration purposes)
    List<String> knownThreats = [
      'com.malicious.app',
      'com.another.malicious.app',
    ];

    // Check if the app's package name is in the list of known threats
    return knownThreats.contains(app.packageName);
  }

  void _quarantineThreat(String appName) {
    setState(() {
      suspectedThreats.remove(appName);
    });

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text("Threat Quarantined"),
        content: Text("$appName has been quarantined."),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: Text("OK"),
          ),
        ],
      ),
    );

    ScaffoldMessenger.of(context).showSnackBar(SnackBar(
      content: Text('$appName quarantined.'),
      backgroundColor: Colors.green,
    ));
  }

  void _showScanResultDialog() {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text("Scan Complete"),
          content: suspectedThreats.isEmpty
              ? Text("No threats detected. Your device is safe.")
              : Text("${suspectedThreats.length} threats detected."),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
                setState(() {
                  isScanning = false;
                });
              },
              child: Text("OK"),
            ),
          ],
        );
      },
    );
  }

  Widget _buildThreatChart() {
    return SizedBox(
      height: 280,
      child: BarChart(
        BarChartData(
          alignment: BarChartAlignment.spaceAround,
          maxY: 10,
          gridData: FlGridData(
            show: true,
            drawHorizontalLine: true,
            getDrawingHorizontalLine: (value) {
              return FlLine(
                color: Colors.white.withOpacity(0.1),
                strokeWidth: 1,
              );
            },
          ),
          borderData: FlBorderData(show: false),
          titlesData: FlTitlesData(
            bottomTitles: AxisTitles(
              sideTitles: SideTitles(
                showTitles: true,
                reservedSize: 32,
                getTitlesWidget: (value, _) {
                  int index = value.toInt();
                  return index >= 0 && index < weekDays.length
                      ? Padding(
                    padding: const EdgeInsets.only(top: 8.0),
                    child: Text(
                      weekDays[index],
                      style: TextStyle(color: Colors.white),
                    ),
                  )
                      : SizedBox();
                },
              ),
            ),
            leftTitles: AxisTitles(
              sideTitles: SideTitles(
                showTitles: true,
                interval: 2,
                getTitlesWidget: (value, _) => Text(
                  value.toInt().toString(),
                  style: TextStyle(color: Colors.white),
                ),
              ),
            ),
            topTitles: AxisTitles(sideTitles: SideTitles(showTitles: false)),
            rightTitles: AxisTitles(sideTitles: SideTitles(showTitles: false)),
          ),
          barGroups: List.generate(weekDays.length, (index) {
            final day = weekDays[index];
            final count = dailyThreatData[day] ?? 0;
            return BarChartGroupData(
              x: index,
              barRods: [
                BarChartRodData(
                  toY: count.toDouble(),
                  gradient: LinearGradient(colors: [Colors.redAccent, Colors.orange]),
                  width: 18,
                  borderRadius: BorderRadius.circular(6),
                ),
              ],
              showingTooltipIndicators: [0],
            );
          }),
        ),
      ),
    );
  }

  String _getDayString(int weekday) {
    switch (weekday) {
      case DateTime.monday:
        return 'Mon';
      case DateTime.tuesday:
        return 'Tue';
      case DateTime.wednesday:
        return 'Wed';
      case DateTime.thursday:
        return 'Thu';
      case DateTime.friday:
        return 'Fri';
      case DateTime.saturday:
        return 'Sat';
      case DateTime.sunday:
        return 'Sun';
      default:
        return '';
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Color(0xFF0D3B66),
      appBar: AppBar(
        backgroundColor: Color(0xFF101820),
        title: Text('Antivirus & Malware Scan', style: TextStyle(color: Colors.white)),
        iconTheme: IconThemeData(color: Colors.white),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Container(
              width: double.infinity,
              padding: EdgeInsets.all(12),
              margin: EdgeInsets.only(bottom: 16),
              decoration: BoxDecoration(
                color: Colors.blueGrey.shade800,
                borderRadius: BorderRadius.circular(12),
              ),
              child: Text(
                "Stay protected and secure. Our real-time scanner helps detect and prevent threats before they cause harm.",
                style: TextStyle(color: Colors.white, fontSize: 16),
                textAlign: TextAlign.center,
              ),
            ),
            Expanded(
              child: isScanning
                  ? Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text("Scanning...", style: TextStyle(color: Colors.white, fontSize: 18, fontWeight: FontWeight.bold)),
                  SizedBox(height: 10),
                  LinearProgressIndicator(),
                  SizedBox(height: 20),
                  Text("Apps Scanned:", style: TextStyle(color: Colors.white70)),
                  Expanded(
                    child: ListView.builder(
                      itemCount: scannedApps.length,
                      itemBuilder: (context, index) {
                        return ListTile(
                          title: Text(scannedApps[index], style: TextStyle(color: Colors.white)),
                          leading: Icon(Icons.shield, color: Colors.blueAccent),
                        );
                      },
                    ),
                  ),
                ],
              )
                  : SingleChildScrollView(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text("Scan Complete", style: TextStyle(color: Colors.white, fontSize: 20, fontWeight: FontWeight.bold)),
                    SizedBox(height: 10),
                    Text("Threats Found: ${suspectedThreats.length}", style: TextStyle(color: suspectedThreats.isEmpty ? Colors.greenAccent : Colors.redAccent, fontSize: 16)),
                    SizedBox(height: 10),
                    suspectedThreats.isEmpty
                        ? Text("Your device is safe.", style: TextStyle(color: Colors.green, fontSize: 16))
                        : Column(
                      children: suspectedThreats.map((app) {
                        return Card(
                          color: Colors.red.shade900,
                          margin: EdgeInsets.symmetric(vertical: 4),
                          child: ListTile(
                            leading: Icon(Icons.warning_amber, color: Colors.white),
                            title: Text(app, style: TextStyle(color: Colors.white)),
                            subtitle: Text("Marked as threat", style: TextStyle(color: Colors.white70)),
                            trailing: TextButton(
                              child: Text("Quarantine", style: TextStyle(color: Colors.white)),
                              onPressed: () => _quarantineThreat(app),
                            ),
                          ),
                        );
                      }).toList(),
                    ),
                    SizedBox(height: 30),
                    Text("Threats Detected (Last 7 Days)", style: TextStyle(color: Colors.white, fontSize: 18, fontWeight: FontWeight.bold)),
                    SizedBox(height: 10),
                    _buildThreatChart(),
                    SizedBox(height: 30),
                    Center(
                      child: ElevatedButton.icon(
                        onPressed: _startScan,
                        icon: Icon(Icons.refresh, color: Colors.blueAccent),
                        label: Text("Rescan Device"),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Color(0xFF101820),
                          foregroundColor: Colors.white,
                          padding: EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(15),
                          ),
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
